import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import scipy.optimize as optimize
import pandas_datareader as pdr

#Activos a elecci√≥n
assets=['AXP','AAPL']
url = 'https://query1.finance.yahoo.com/v7/finance/download/{}?period1={}&period2={}&interval=1d&events=history'.format(assets, '2020-01-01','2023-09-06')

#Obtencion de datos
data=pd.DataFrame()
for t in assets:
    data[t]=pdr.DataReader(t,'yahoo','2020-01-01','2023-09-06',access_key=url)

log_returns=np.log(1+data.pct_change())

port_returns=[]
port_vols=[]
num_assets=len(assets)

for i in range(10000):
    weights=np.random.random(num_assets)
    weights/=np.sum(weights)
    port_returns.append(np.sum(weights*log_returns.mean())*252)
    port_vols.append(np.sqrt(np.dot(weights.T,np.dot(log_returns.cov()*252,weights))))

port_returns=np.array(port_returns)
port_vols=np.array(port_vols)

def portfolio_stats(weights,log_returns):
    port_returns=np.sum(weights*log_returns.mean())*252
    port_vols=np.sqrt(np.dot(weights.T,np.dot(log_returns.cov()*252,weights)))
    sharpe=port_returns/port_vols
    return{'Return':port_returns,'Volatility':port_vols,'Sharpe':sharpe}

sharpe=port_returns/port_vols
max_sr_returns=port_returns[sharpe.argmax()]
max_sr_volatility=port_vols[sharpe.argmax()]

def minimize_sharpe(weights,log_returns):
    return portfolio_stats(weights,log_returns)['Sharpe']

initializer=num_assets*[1./num_assets,]
bounds=tuple((0,1)for x in range(num_assets))

optimal_sharpe=optimize.minimize(minimize_sharpe,initializer,method='SLSQP',args=(log_returns,),bounds=bounds)
optimal_sharpe_weights=optimal_sharpe['x'].round(3)
optimal_stats=portfolio_stats(optimal_sharpe_weights,log_returns)

print("Pesos optimos de la cartera: ", list(zip(assets,list(optimal_sharpe_weights*100))))
print("Retorno optimo de la cartera: ",np.round(optimal_stats['Return']*100,3))
print("Volatilidad optima de la cartera: ",np.round(optimal_stats['Volatility']*100,3))
print("Sharpe optimo de la cartera: ",np.round(optimal_stats['Sharpe'],3))

plt.figure(figsize=(12,6))
plt.scatter(port_vols,port_returns, c=(port_returns/port_vols))
plt.scatter(max_sr_volatility,max_sr_returns,c='red',s=50)
plt.colorbar(label='Sharpe Ratio, rf=0')
plt.xlabel('Volatilidad de la cartera')
plt.ylabel('Retornos de la cartera')
plt.show()
